// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: locations.sql

package database

import (
	"context"
	"time"
)

const addLocations = `-- name: AddLocations :one
INSERT INTO locations
    (address, latitude, longitude, category, description)
VALUES (?, ?, ?, ?, ?)
RETURNING id, latitude, longitude, address, category, description, created_at, updated_at
`

type AddLocationsParams struct {
	Address     string  `db:"address" json:"address"`
	Latitude    float64 `db:"latitude" json:"latitude"`
	Longitude   float64 `db:"longitude" json:"longitude"`
	Category    *string `db:"category" json:"category"`
	Description *string `db:"description" json:"description"`
}

func (q *Queries) AddLocations(ctx context.Context, arg AddLocationsParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, addLocations,
		arg.Address,
		arg.Latitude,
		arg.Longitude,
		arg.Category,
		arg.Description,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Category,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT id, address, latitude, longitude, category, description, created_at, updated_at
FROM locations
`

type GetLocationsRow struct {
	ID          int64      `db:"id" json:"id"`
	Address     string     `db:"address" json:"address"`
	Latitude    float64    `db:"latitude" json:"latitude"`
	Longitude   float64    `db:"longitude" json:"longitude"`
	Category    *string    `db:"category" json:"category"`
	Description *string    `db:"description" json:"description"`
	CreatedAt   *time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   *time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetLocations(ctx context.Context) ([]GetLocationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLocationsRow{}
	for rows.Next() {
		var i GetLocationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Latitude,
			&i.Longitude,
			&i.Category,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationsByCategory = `-- name: GetLocationsByCategory :many
SELECT id, address, latitude, longitude, category, description, created_at, updated_at
FROM locations
WHERE category LIKE ?
ORDER BY created_at DESC
`

type GetLocationsByCategoryRow struct {
	ID          int64      `db:"id" json:"id"`
	Address     string     `db:"address" json:"address"`
	Latitude    float64    `db:"latitude" json:"latitude"`
	Longitude   float64    `db:"longitude" json:"longitude"`
	Category    *string    `db:"category" json:"category"`
	Description *string    `db:"description" json:"description"`
	CreatedAt   *time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   *time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetLocationsByCategory(ctx context.Context, category *string) ([]GetLocationsByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getLocationsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLocationsByCategoryRow{}
	for rows.Next() {
		var i GetLocationsByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Latitude,
			&i.Longitude,
			&i.Category,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations
SET latitude = ?, longitude = ?, description = ?, category = ?
WHERE id = ?
RETURNING id, latitude, longitude, address, category, description, created_at, updated_at
`

type UpdateLocationParams struct {
	Latitude    float64 `db:"latitude" json:"latitude"`
	Longitude   float64 `db:"longitude" json:"longitude"`
	Description *string `db:"description" json:"description"`
	Category    *string `db:"category" json:"category"`
	ID          int64   `db:"id" json:"id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation,
		arg.Latitude,
		arg.Longitude,
		arg.Description,
		arg.Category,
		arg.ID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Category,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
